version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: {{APP_NAME}}_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
      - ./storage:/var/www/html/storage
    networks:
      - {{APP_NAME}}_network
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
    depends_on:
      - mysql
      - redis
    env_file:
      - .env

  nginx:
    image: nginx:alpine
    container_name: {{APP_NAME}}_nginx
    restart: unless-stopped
    ports:
      - "{{NGINX_PORT}}:80"
    volumes:
      - .:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - {{APP_NAME}}_network
    depends_on:
      - app

  mysql:
    image: mysql:{{DB_VERSION}}
    container_name: {{APP_NAME}}_mysql
    restart: unless-stopped
    ports:
      - "{{DB_PORT}}:3306"
    environment:
      MYSQL_DATABASE: {{DB_DATABASE}}
      MYSQL_USER: {{DB_USERNAME}}
      MYSQL_PASSWORD: {{DB_PASSWORD}}
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - {{APP_NAME}}_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  redis:
    image: redis:alpine
    container_name: {{APP_NAME}}_redis
    restart: unless-stopped
    ports:
      - "{{REDIS_PORT}}:6379"
    volumes:
      - redis_data:/data
    networks:
      - {{APP_NAME}}_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5

  # Optional: Horizon (Queue Worker)
  horizon:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: {{APP_NAME}}_horizon
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - .:/var/www/html
    networks:
      - {{APP_NAME}}_network
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
    env_file:
      - .enn
    command: php artisan horizon
    depends_on:
      - mysql
      - redis
    profiles:
      - horizon

  # Optional: Mailhog (Email Testing)
  mailhog:
    image: mailhog/mailhog:latest
    container_name: {{APP_NAME}}_mailhog
    restart: unless-stopped
    ports:
      - "{{MAILHOG_PORT}}:8025"
      - "1025:1025"
    networks:
      - {{APP_NAME}}_network
    profiles:
      - mailhog

  # Optional: Meilisearch (Search Engine)
  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: {{APP_NAME}}_meilisearch
    restart: unless-stopped
    ports:
      - "{{MEILISEARCH_PORT}}:7700"
    environment:
      MEILI_MASTER_KEY: masterKey
      MEILI_ENV: development
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - {{APP_NAME}}_network
    profiles:
      - meilisearch

  # Optional: MinIO (S3 Compatible Storage)
  minio:
    image: minio/minio:latest
    container_name: {{APP_NAME}}_minio
    restart: unless-stopped
    ports:
      - "{{MINIO_PORT}}:9000"
      - "{{MINIO_CONSOLE_PORT}}:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    networks:
      - {{APP_NAME}}_network
    command: server /data --console-address ":9001"
    profiles:
      - minio

volumes:
  mysql_data:
  redis_data:
  meilisearch_data:
  minio_data:

networks:
  {{APP_NAME}}_network:
    driver: bridge
